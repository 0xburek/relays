// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: msg_services.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_msg_services_proto protoreflect.FileDescriptor

var file_msg_services_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xdf, 0x03, 0x0a,
	0x09, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x11, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x20, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x73, 0x67, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x16, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x2d,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x77, 0x48, 0x65, 0x61, 0x76, 0x69, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x73, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x77, 0x48, 0x65, 0x61, 0x76, 0x69, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x73, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x65, 0x77, 0x48, 0x65, 0x61, 0x76, 0x69, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x22,
	0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_msg_services_proto_goTypes = []interface{}{
	(*MsgIngestHeaderChain)(nil),              // 0: relayproto.MsgIngestHeaderChain
	(*MsgIngestDifficultyChange)(nil),         // 1: relayproto.MsgIngestDifficultyChange
	(*MsgMarkNewHeaviest)(nil),                // 2: relayproto.MsgMarkNewHeaviest
	(*MsgNewRequest)(nil),                     // 3: relayproto.MsgNewRequest
	(*MsgProvideProof)(nil),                   // 4: relayproto.MsgProvideProof
	(*MsgIngestHeaderChainResponse)(nil),      // 5: relayproto.MsgIngestHeaderChainResponse
	(*MsgIngestDifficultyChangeResponse)(nil), // 6: relayproto.MsgIngestDifficultyChangeResponse
	(*MsgMarkNewHeaviestResponse)(nil),        // 7: relayproto.MsgMarkNewHeaviestResponse
	(*MsgNewRequestResponse)(nil),             // 8: relayproto.MsgNewRequestResponse
	(*MsgProvideProofResponse)(nil),           // 9: relayproto.MsgProvideProofResponse
}
var file_msg_services_proto_depIdxs = []int32{
	0, // 0: relayproto.MsgServer.IngestHeaderChain:input_type -> relayproto.MsgIngestHeaderChain
	1, // 1: relayproto.MsgServer.IngestDifficultyChange:input_type -> relayproto.MsgIngestDifficultyChange
	2, // 2: relayproto.MsgServer.MarkNewHeaviest:input_type -> relayproto.MsgMarkNewHeaviest
	3, // 3: relayproto.MsgServer.NewRequest:input_type -> relayproto.MsgNewRequest
	4, // 4: relayproto.MsgServer.ProvideProof:input_type -> relayproto.MsgProvideProof
	5, // 5: relayproto.MsgServer.IngestHeaderChain:output_type -> relayproto.MsgIngestHeaderChainResponse
	6, // 6: relayproto.MsgServer.IngestDifficultyChange:output_type -> relayproto.MsgIngestDifficultyChangeResponse
	7, // 7: relayproto.MsgServer.MarkNewHeaviest:output_type -> relayproto.MsgMarkNewHeaviestResponse
	8, // 8: relayproto.MsgServer.NewRequest:output_type -> relayproto.MsgNewRequestResponse
	9, // 9: relayproto.MsgServer.ProvideProof:output_type -> relayproto.MsgProvideProofResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_msg_services_proto_init() }
func file_msg_services_proto_init() {
	if File_msg_services_proto != nil {
		return
	}
	file_msgs_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msg_services_proto_goTypes,
		DependencyIndexes: file_msg_services_proto_depIdxs,
	}.Build()
	File_msg_services_proto = out.File
	file_msg_services_proto_rawDesc = nil
	file_msg_services_proto_goTypes = nil
	file_msg_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MsgServerClient is the client API for MsgServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServerClient interface {
	IngestHeaderChain(ctx context.Context, in *MsgIngestHeaderChain, opts ...grpc.CallOption) (*MsgIngestHeaderChainResponse, error)
	IngestDifficultyChange(ctx context.Context, in *MsgIngestDifficultyChange, opts ...grpc.CallOption) (*MsgIngestDifficultyChangeResponse, error)
	MarkNewHeaviest(ctx context.Context, in *MsgMarkNewHeaviest, opts ...grpc.CallOption) (*MsgMarkNewHeaviestResponse, error)
	NewRequest(ctx context.Context, in *MsgNewRequest, opts ...grpc.CallOption) (*MsgNewRequestResponse, error)
	ProvideProof(ctx context.Context, in *MsgProvideProof, opts ...grpc.CallOption) (*MsgProvideProofResponse, error)
}

type msgServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgServerClient(cc grpc.ClientConnInterface) MsgServerClient {
	return &msgServerClient{cc}
}

func (c *msgServerClient) IngestHeaderChain(ctx context.Context, in *MsgIngestHeaderChain, opts ...grpc.CallOption) (*MsgIngestHeaderChainResponse, error) {
	out := new(MsgIngestHeaderChainResponse)
	err := c.cc.Invoke(ctx, "/relayproto.MsgServer/IngestHeaderChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServerClient) IngestDifficultyChange(ctx context.Context, in *MsgIngestDifficultyChange, opts ...grpc.CallOption) (*MsgIngestDifficultyChangeResponse, error) {
	out := new(MsgIngestDifficultyChangeResponse)
	err := c.cc.Invoke(ctx, "/relayproto.MsgServer/IngestDifficultyChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServerClient) MarkNewHeaviest(ctx context.Context, in *MsgMarkNewHeaviest, opts ...grpc.CallOption) (*MsgMarkNewHeaviestResponse, error) {
	out := new(MsgMarkNewHeaviestResponse)
	err := c.cc.Invoke(ctx, "/relayproto.MsgServer/MarkNewHeaviest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServerClient) NewRequest(ctx context.Context, in *MsgNewRequest, opts ...grpc.CallOption) (*MsgNewRequestResponse, error) {
	out := new(MsgNewRequestResponse)
	err := c.cc.Invoke(ctx, "/relayproto.MsgServer/NewRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServerClient) ProvideProof(ctx context.Context, in *MsgProvideProof, opts ...grpc.CallOption) (*MsgProvideProofResponse, error) {
	out := new(MsgProvideProofResponse)
	err := c.cc.Invoke(ctx, "/relayproto.MsgServer/ProvideProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for MsgServer service.
type MsgServer interface {
	IngestHeaderChain(context.Context, *MsgIngestHeaderChain) (*MsgIngestHeaderChainResponse, error)
	IngestDifficultyChange(context.Context, *MsgIngestDifficultyChange) (*MsgIngestDifficultyChangeResponse, error)
	MarkNewHeaviest(context.Context, *MsgMarkNewHeaviest) (*MsgMarkNewHeaviestResponse, error)
	NewRequest(context.Context, *MsgNewRequest) (*MsgNewRequestResponse, error)
	ProvideProof(context.Context, *MsgProvideProof) (*MsgProvideProofResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) IngestHeaderChain(context.Context, *MsgIngestHeaderChain) (*MsgIngestHeaderChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestHeaderChain not implemented")
}
func (*UnimplementedMsgServer) IngestDifficultyChange(context.Context, *MsgIngestDifficultyChange) (*MsgIngestDifficultyChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestDifficultyChange not implemented")
}
func (*UnimplementedMsgServer) MarkNewHeaviest(context.Context, *MsgMarkNewHeaviest) (*MsgMarkNewHeaviestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNewHeaviest not implemented")
}
func (*UnimplementedMsgServer) NewRequest(context.Context, *MsgNewRequest) (*MsgNewRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRequest not implemented")
}
func (*UnimplementedMsgServer) ProvideProof(context.Context, *MsgProvideProof) (*MsgProvideProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideProof not implemented")
}

func RegisterMsgServer(s *grpc.Server, srv MsgServer) {
	s.RegisterService(&_MsgServer_serviceDesc, srv)
}

func _MsgServer_IngestHeaderChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIngestHeaderChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IngestHeaderChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.MsgServer/IngestHeaderChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IngestHeaderChain(ctx, req.(*MsgIngestHeaderChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgServer_IngestDifficultyChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIngestDifficultyChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IngestDifficultyChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.MsgServer/IngestDifficultyChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IngestDifficultyChange(ctx, req.(*MsgIngestDifficultyChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgServer_MarkNewHeaviest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarkNewHeaviest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarkNewHeaviest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.MsgServer/MarkNewHeaviest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarkNewHeaviest(ctx, req.(*MsgMarkNewHeaviest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgServer_NewRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.MsgServer/NewRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewRequest(ctx, req.(*MsgNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgServer_ProvideProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProvideProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProvideProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.MsgServer/ProvideProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProvideProof(ctx, req.(*MsgProvideProof))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relayproto.MsgServer",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestHeaderChain",
			Handler:    _MsgServer_IngestHeaderChain_Handler,
		},
		{
			MethodName: "IngestDifficultyChange",
			Handler:    _MsgServer_IngestDifficultyChange_Handler,
		},
		{
			MethodName: "MarkNewHeaviest",
			Handler:    _MsgServer_MarkNewHeaviest_Handler,
		},
		{
			MethodName: "NewRequest",
			Handler:    _MsgServer_NewRequest_Handler,
		},
		{
			MethodName: "ProvideProof",
			Handler:    _MsgServer_ProvideProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg_services.proto",
}
