// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package relayproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	IsAncestor(ctx context.Context, in *QueryParamsIsAncestor, opts ...grpc.CallOption) (*QueryResIsAncestor, error)
	GetRelayGenesis(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*QueryResGetRelayGenesis, error)
	GetLastReorgLCA(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*QueryResGetLastReorgLCA, error)
	GetBestDigest(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*QueryResGetBestDigest, error)
	FindAncestor(ctx context.Context, in *QueryParamsFindAncestor, opts ...grpc.CallOption) (*QueryResFindAncestor, error)
	HeaviestFromAncestor(ctx context.Context, in *QueryParamsHeaviestFromAncestor, opts ...grpc.CallOption) (*QueryResHeaviestFromAncestor, error)
	IsMostRecentCommonAncestor(ctx context.Context, in *QueryParamsIsMostRecentCommonAncestor, opts ...grpc.CallOption) (*QueryResIsMostRecentCommonAncestor, error)
	GetRequest(ctx context.Context, in *QueryParamsGetRequest, opts ...grpc.CallOption) (*QueryResGetRequest, error)
	CheckRequests(ctx context.Context, in *QueryParamsCheckRequests, opts ...grpc.CallOption) (*QueryResCheckRequests, error)
	CheckProof(ctx context.Context, in *QueryParamsCheckProof, opts ...grpc.CallOption) (*QueryResCheckProof, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) IsAncestor(ctx context.Context, in *QueryParamsIsAncestor, opts ...grpc.CallOption) (*QueryResIsAncestor, error) {
	out := new(QueryResIsAncestor)
	err := c.cc.Invoke(ctx, "/relayproto.Query/IsAncestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRelayGenesis(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*QueryResGetRelayGenesis, error) {
	out := new(QueryResGetRelayGenesis)
	err := c.cc.Invoke(ctx, "/relayproto.Query/GetRelayGenesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastReorgLCA(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*QueryResGetLastReorgLCA, error) {
	out := new(QueryResGetLastReorgLCA)
	err := c.cc.Invoke(ctx, "/relayproto.Query/GetLastReorgLCA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBestDigest(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*QueryResGetBestDigest, error) {
	out := new(QueryResGetBestDigest)
	err := c.cc.Invoke(ctx, "/relayproto.Query/GetBestDigest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FindAncestor(ctx context.Context, in *QueryParamsFindAncestor, opts ...grpc.CallOption) (*QueryResFindAncestor, error) {
	out := new(QueryResFindAncestor)
	err := c.cc.Invoke(ctx, "/relayproto.Query/FindAncestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeaviestFromAncestor(ctx context.Context, in *QueryParamsHeaviestFromAncestor, opts ...grpc.CallOption) (*QueryResHeaviestFromAncestor, error) {
	out := new(QueryResHeaviestFromAncestor)
	err := c.cc.Invoke(ctx, "/relayproto.Query/HeaviestFromAncestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsMostRecentCommonAncestor(ctx context.Context, in *QueryParamsIsMostRecentCommonAncestor, opts ...grpc.CallOption) (*QueryResIsMostRecentCommonAncestor, error) {
	out := new(QueryResIsMostRecentCommonAncestor)
	err := c.cc.Invoke(ctx, "/relayproto.Query/IsMostRecentCommonAncestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRequest(ctx context.Context, in *QueryParamsGetRequest, opts ...grpc.CallOption) (*QueryResGetRequest, error) {
	out := new(QueryResGetRequest)
	err := c.cc.Invoke(ctx, "/relayproto.Query/GetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckRequests(ctx context.Context, in *QueryParamsCheckRequests, opts ...grpc.CallOption) (*QueryResCheckRequests, error) {
	out := new(QueryResCheckRequests)
	err := c.cc.Invoke(ctx, "/relayproto.Query/CheckRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckProof(ctx context.Context, in *QueryParamsCheckProof, opts ...grpc.CallOption) (*QueryResCheckProof, error) {
	out := new(QueryResCheckProof)
	err := c.cc.Invoke(ctx, "/relayproto.Query/CheckProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	IsAncestor(context.Context, *QueryParamsIsAncestor) (*QueryResIsAncestor, error)
	GetRelayGenesis(context.Context, *EmptyParams) (*QueryResGetRelayGenesis, error)
	GetLastReorgLCA(context.Context, *EmptyParams) (*QueryResGetLastReorgLCA, error)
	GetBestDigest(context.Context, *EmptyParams) (*QueryResGetBestDigest, error)
	FindAncestor(context.Context, *QueryParamsFindAncestor) (*QueryResFindAncestor, error)
	HeaviestFromAncestor(context.Context, *QueryParamsHeaviestFromAncestor) (*QueryResHeaviestFromAncestor, error)
	IsMostRecentCommonAncestor(context.Context, *QueryParamsIsMostRecentCommonAncestor) (*QueryResIsMostRecentCommonAncestor, error)
	GetRequest(context.Context, *QueryParamsGetRequest) (*QueryResGetRequest, error)
	CheckRequests(context.Context, *QueryParamsCheckRequests) (*QueryResCheckRequests, error)
	CheckProof(context.Context, *QueryParamsCheckProof) (*QueryResCheckProof, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) IsAncestor(context.Context, *QueryParamsIsAncestor) (*QueryResIsAncestor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAncestor not implemented")
}
func (UnimplementedQueryServer) GetRelayGenesis(context.Context, *EmptyParams) (*QueryResGetRelayGenesis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelayGenesis not implemented")
}
func (UnimplementedQueryServer) GetLastReorgLCA(context.Context, *EmptyParams) (*QueryResGetLastReorgLCA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastReorgLCA not implemented")
}
func (UnimplementedQueryServer) GetBestDigest(context.Context, *EmptyParams) (*QueryResGetBestDigest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestDigest not implemented")
}
func (UnimplementedQueryServer) FindAncestor(context.Context, *QueryParamsFindAncestor) (*QueryResFindAncestor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAncestor not implemented")
}
func (UnimplementedQueryServer) HeaviestFromAncestor(context.Context, *QueryParamsHeaviestFromAncestor) (*QueryResHeaviestFromAncestor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeaviestFromAncestor not implemented")
}
func (UnimplementedQueryServer) IsMostRecentCommonAncestor(context.Context, *QueryParamsIsMostRecentCommonAncestor) (*QueryResIsMostRecentCommonAncestor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMostRecentCommonAncestor not implemented")
}
func (UnimplementedQueryServer) GetRequest(context.Context, *QueryParamsGetRequest) (*QueryResGetRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (UnimplementedQueryServer) CheckRequests(context.Context, *QueryParamsCheckRequests) (*QueryResCheckRequests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRequests not implemented")
}
func (UnimplementedQueryServer) CheckProof(context.Context, *QueryParamsCheckProof) (*QueryResCheckProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProof not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_IsAncestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsIsAncestor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsAncestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/IsAncestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsAncestor(ctx, req.(*QueryParamsIsAncestor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRelayGenesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRelayGenesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/GetRelayGenesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRelayGenesis(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastReorgLCA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastReorgLCA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/GetLastReorgLCA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastReorgLCA(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBestDigest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBestDigest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/GetBestDigest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBestDigest(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FindAncestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsFindAncestor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FindAncestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/FindAncestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FindAncestor(ctx, req.(*QueryParamsFindAncestor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeaviestFromAncestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsHeaviestFromAncestor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeaviestFromAncestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/HeaviestFromAncestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeaviestFromAncestor(ctx, req.(*QueryParamsHeaviestFromAncestor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsMostRecentCommonAncestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsIsMostRecentCommonAncestor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsMostRecentCommonAncestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/IsMostRecentCommonAncestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsMostRecentCommonAncestor(ctx, req.(*QueryParamsIsMostRecentCommonAncestor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/GetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRequest(ctx, req.(*QueryParamsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsCheckRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/CheckRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckRequests(ctx, req.(*QueryParamsCheckRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsCheckProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Query/CheckProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckProof(ctx, req.(*QueryParamsCheckProof))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relayproto.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAncestor",
			Handler:    _Query_IsAncestor_Handler,
		},
		{
			MethodName: "GetRelayGenesis",
			Handler:    _Query_GetRelayGenesis_Handler,
		},
		{
			MethodName: "GetLastReorgLCA",
			Handler:    _Query_GetLastReorgLCA_Handler,
		},
		{
			MethodName: "GetBestDigest",
			Handler:    _Query_GetBestDigest_Handler,
		},
		{
			MethodName: "FindAncestor",
			Handler:    _Query_FindAncestor_Handler,
		},
		{
			MethodName: "HeaviestFromAncestor",
			Handler:    _Query_HeaviestFromAncestor_Handler,
		},
		{
			MethodName: "IsMostRecentCommonAncestor",
			Handler:    _Query_IsMostRecentCommonAncestor_Handler,
		},
		{
			MethodName: "GetRequest",
			Handler:    _Query_GetRequest_Handler,
		},
		{
			MethodName: "CheckRequests",
			Handler:    _Query_CheckRequests_Handler,
		},
		{
			MethodName: "CheckProof",
			Handler:    _Query_CheckProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "querier.proto",
}
